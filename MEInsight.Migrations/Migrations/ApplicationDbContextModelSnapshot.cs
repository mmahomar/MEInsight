// <auto-generated />
using System;
using MEInsight.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MEInsight.Migrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MEInsight.Entities.Core.EducationCenter", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("HeadTeacher")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(10);

                    b.Property<bool?>("IsClusterCenter")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6);

                    b.Property<int?>("RefEducationCenterAdministrationTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int?>("RefEducationCenterClusterId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("RefEducationCenterLanguageId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int?>("RefEducationCenterLocationId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefEducationCenterStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int?>("RefEducationCenterTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("OrganizationId");

                    b.HasIndex("RefEducationCenterAdministrationTypeId");

                    b.HasIndex("RefEducationCenterClusterId");

                    b.HasIndex("RefEducationCenterLanguageId");

                    b.HasIndex("RefEducationCenterLocationId");

                    b.HasIndex("RefEducationCenterStatusId");

                    b.HasIndex("RefEducationCenterTypeId");

                    b.ToTable("EducationCenter");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.EducationCenterClassroom", b =>
                {
                    b.Property<Guid>("EducationCenterClassroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<int?>("Classes")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int?>("Classrooms")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EducationCenterPeriodId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<int>("RefGradeLevelId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.HasKey("EducationCenterClassroomId");

                    b.HasIndex("EducationCenterPeriodId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RefGradeLevelId");

                    b.ToTable("EducationCenterClassroom");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.EducationCenterEnrollment", b =>
                {
                    b.Property<Guid>("EducationCenterEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DisabledFemale")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int?>("DisabledMale")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int>("EducationCenterPeriodId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("Female")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Male")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<int>("RefGradeLevelId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("RefParticipantTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(1);

                    b.Property<int>("SchoolPeriodId")
                        .HasColumnType("int");

                    b.HasKey("EducationCenterEnrollmentId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RefGradeLevelId");

                    b.HasIndex("RefParticipantTypeId");

                    b.HasIndex("SchoolPeriodId");

                    b.ToTable("EducationCenterEnrollment");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.EducationCenterPeriod", b =>
                {
                    b.Property<int>("EducationCenterPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationCenterPeriodId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.HasKey("EducationCenterPeriodId");

                    b.ToTable("EducationCenterPeriod");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Organization", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrganizationUnit")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RefOrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.HasKey("OrganizationId");

                    b.HasIndex("ParentOrganizationId");

                    b.HasIndex("RefLocationId");

                    b.HasIndex("RefOrganizationTypeId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Participant", b =>
                {
                    b.Property<Guid>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("Disability")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("InstantMessenger")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RefDisabilityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RefLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RefParticipantCohortId")
                        .HasColumnType("int");

                    b.Property<int>("RefParticipantTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RefSexId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.HasKey("ParticipantId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RefDisabilityTypeId");

                    b.HasIndex("RefLocationId");

                    b.HasIndex("RefParticipantCohortId");

                    b.HasIndex("RefParticipantTypeId");

                    b.HasIndex("RefSexId");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<bool?>("Closed")
                        .HasColumnType("bit")
                        .HasColumnOrder(10);

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(11);

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(12);

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(9);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(14);

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7);

                    b.Property<int?>("ProgramId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int?>("RefGradeLevelId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(13);

                    b.HasKey("GroupId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("RefGradeLevelId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.GroupEnrollment", b =>
                {
                    b.Property<Guid>("GroupEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<int?>("Attendance")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefEnrollmentStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8);

                    b.HasKey("GroupEnrollmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("GroupEnrollment");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.GroupEvaluation", b =>
                {
                    b.Property<Guid>("GroupEvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("EvaluationDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<Guid>("GroupEnrollmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ProgramAssessmentId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefEvaluationStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int?>("Score")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5);

                    b.HasKey("GroupEvaluationId");

                    b.HasIndex("GroupEnrollmentId");

                    b.HasIndex("ProgramAssessmentId");

                    b.ToTable("GroupEvaluation");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Program", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4);

                    b.Property<bool>("DisplayMarks")
                        .HasColumnType("bit")
                        .HasColumnOrder(9);

                    b.Property<bool>("HasAssessment")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Max")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int?>("Min")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(1);

                    b.Property<int?>("RefAttendanceUnitId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("RefOrganizationTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<int?>("RefProgramDeliveryTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefProgramTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("ProgramId");

                    b.HasIndex("RefOrganizationTypeId");

                    b.HasIndex("RefProgramTypeId");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.ProgramAssessment", b =>
                {
                    b.Property<int>("ProgramAssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramAssessmentId"));

                    b.Property<string>("AssessmentName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<int?>("CompletionScore")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Max")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int?>("MaximumScore")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int?>("Min")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("MinimumScore")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("RefAssessmentTypeId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefAttendanceUnitId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("RefEvaluationStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<bool>("TrackAttendance")
                        .HasColumnType("bit")
                        .HasColumnOrder(5);

                    b.HasKey("ProgramAssessmentId");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramAssessment");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefDisabilityType", b =>
                {
                    b.Property<int>("RefDisabilityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefDisabilityTypeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<string>("DisabilityType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.HasKey("RefDisabilityTypeId");

                    b.ToTable("RefDisabilityType");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationCenterAdministrationType", b =>
                {
                    b.Property<int>("RefEducationCenterAdministrationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefEducationCenterAdministrationTypeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<string>("EducationCenterAdministrationType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.HasKey("RefEducationCenterAdministrationTypeId");

                    b.ToTable("RefEducationCenterAdministrationType");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationCenterCluster", b =>
                {
                    b.Property<int>("RefEducationCenterClusterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefEducationCenterClusterId"));

                    b.Property<string>("Code")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<string>("EducationCenterCluster")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("RefLocationId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(3);

                    b.HasKey("RefEducationCenterClusterId");

                    b.HasIndex(new[] { "RefLocationId" }, "IX_RefSchoolCluster_RefLocationId");

                    b.ToTable("RefEducationCenterCluster");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationCenterLanguage", b =>
                {
                    b.Property<int>("RefEducationCenterLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefEducationCenterLanguageId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<string>("EducationCenterLanguage")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.HasKey("RefEducationCenterLanguageId");

                    b.ToTable("RefEducationCenterLanguage");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationCenterLocation", b =>
                {
                    b.Property<int>("RefEducationCenterLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefEducationCenterLocationId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<string>("EducationCenterLocation")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.HasKey("RefEducationCenterLocationId");

                    b.ToTable("RefEducationCenterLocation");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationCenterStatus", b =>
                {
                    b.Property<int>("RefEducationCenterStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefEducationCenterStatusId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<string>("EduccationCenterStatus")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.HasKey("RefEducationCenterStatusId");

                    b.ToTable("RefEducationCenterStatus");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationCenterType", b =>
                {
                    b.Property<int>("RefEducationCenterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefEducationCenterTypeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<string>("EducationCenterType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.HasKey("RefEducationCenterTypeId");

                    b.ToTable("RefEducationCenterType");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefGradeLevel", b =>
                {
                    b.Property<int>("RefGradeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefGradeLevelId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<string>("GradeLevel")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<string>("GradeLevelId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(3);

                    b.HasKey("RefGradeLevelId");

                    b.ToTable("RefGradeLevel");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefLocation", b =>
                {
                    b.Property<string>("RefLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("ParentLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RefLocationTypeId")
                        .HasColumnType("int");

                    b.HasKey("RefLocationId");

                    b.HasIndex("ParentLocationId");

                    b.HasIndex("RefLocationTypeId");

                    b.ToTable("RefLocation");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefLocationType", b =>
                {
                    b.Property<int>("RefLocationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefLocationTypeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<int>("LocationLevel")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.HasKey("RefLocationTypeId");

                    b.ToTable("RefLocationType");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefOrganizationType", b =>
                {
                    b.Property<int>("RefOrganizationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefOrganizationTypeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("RefOrganizationTypeName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("RefOrganizationTypeId");

                    b.ToTable("RefOrganizationType");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefParticipantCohort", b =>
                {
                    b.Property<int>("RefParticipantCohortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefParticipantCohortId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<string>("ParticipantCohort")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.HasKey("RefParticipantCohortId");

                    b.ToTable("RefParticipantCohort");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefParticipantType", b =>
                {
                    b.Property<int>("RefParticipantTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefParticipantTypeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<string>("ParticipantType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.HasKey("RefParticipantTypeId");

                    b.ToTable("RefParticipantType");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefProgramType", b =>
                {
                    b.Property<int>("RefProgramTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefProgramTypeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ProgramType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("RefProgramTypeId");

                    b.ToTable("RefProgramType");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSex", b =>
                {
                    b.Property<int>("RefSexId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.Property<string>("SexId")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnOrder(2);

                    b.HasKey("RefSexId");

                    b.ToTable("RefSex");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Core.EducationCenter", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Organization", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefEducationCenterAdministrationType", "EducationCenterAdministrationTypes")
                        .WithMany("EducationCenters")
                        .HasForeignKey("RefEducationCenterAdministrationTypeId");

                    b.HasOne("MEInsight.Entities.Reference.RefEducationCenterCluster", "EducationCenterClusters")
                        .WithMany("EducationCenters")
                        .HasForeignKey("RefEducationCenterClusterId");

                    b.HasOne("MEInsight.Entities.Reference.RefEducationCenterLanguage", "EducationCenterLanguages")
                        .WithMany("EducationCenters")
                        .HasForeignKey("RefEducationCenterLanguageId");

                    b.HasOne("MEInsight.Entities.Reference.RefEducationCenterLocation", "EducationCenterLocations")
                        .WithMany("EducationCenters")
                        .HasForeignKey("RefEducationCenterLocationId");

                    b.HasOne("MEInsight.Entities.Reference.RefEducationCenterStatus", "EducationCenterStatus")
                        .WithMany("EducationCenters")
                        .HasForeignKey("RefEducationCenterStatusId");

                    b.HasOne("MEInsight.Entities.Reference.RefEducationCenterType", "EducationCenterTypes")
                        .WithMany("EducationCenters")
                        .HasForeignKey("RefEducationCenterTypeId");

                    b.Navigation("EducationCenterAdministrationTypes");

                    b.Navigation("EducationCenterClusters");

                    b.Navigation("EducationCenterLanguages");

                    b.Navigation("EducationCenterLocations");

                    b.Navigation("EducationCenterStatus");

                    b.Navigation("EducationCenterTypes");

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.EducationCenterClassroom", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.EducationCenterPeriod", "EducationCenterPeriods")
                        .WithMany("EducationCenterClassrooms")
                        .HasForeignKey("EducationCenterPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Core.EducationCenter", "EducationCenters")
                        .WithMany("EducationCenterClassrooms")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefGradeLevel", "GradeLevels")
                        .WithMany("SchoolClassrooms")
                        .HasForeignKey("RefGradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationCenterPeriods");

                    b.Navigation("EducationCenters");

                    b.Navigation("GradeLevels");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.EducationCenterEnrollment", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.EducationCenter", "EducationCenters")
                        .WithMany("EducationCenterEnrollments")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("MEInsight.Entities.Reference.RefGradeLevel", "GradeLevels")
                        .WithMany("SchoolEnrollments")
                        .HasForeignKey("RefGradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefParticipantType", "ParticipantTypes")
                        .WithMany("SchoolEnrollments")
                        .HasForeignKey("RefParticipantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Core.EducationCenterPeriod", "EducationCenterPeriods")
                        .WithMany("EducationCenterEnrollments")
                        .HasForeignKey("SchoolPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationCenterPeriods");

                    b.Navigation("EducationCenters");

                    b.Navigation("GradeLevels");

                    b.Navigation("ParticipantTypes");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Organization", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Organization", "ParentOrganizations")
                        .WithMany("Organizations")
                        .HasForeignKey("ParentOrganizationId");

                    b.HasOne("MEInsight.Entities.Reference.RefLocation", "Locations")
                        .WithMany("Organizations")
                        .HasForeignKey("RefLocationId");

                    b.HasOne("MEInsight.Entities.Reference.RefOrganizationType", "OrganizationTypes")
                        .WithMany("Organizations")
                        .HasForeignKey("RefOrganizationTypeId");

                    b.OwnsOne("MEInsight.Entities.Core.Organization+OrganizationData", "Data", b1 =>
                        {
                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Organization");

                            b1.ToJson("Data");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");

                            b1.OwnsOne("MEInsight.Entities.Core.Organization+OrganizationData+OrganizationContact", "Contacts", b2 =>
                                {
                                    b2.Property<Guid>("OrganizationDataOrganizationId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Contact")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Phone")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OrganizationDataOrganizationId");

                                    b2.ToTable("Organization");

                                    b2.WithOwner()
                                        .HasForeignKey("OrganizationDataOrganizationId");
                                });

                            b1.OwnsMany("MEInsight.Entities.Core.Language", "Languages", b2 =>
                                {
                                    b2.Property<Guid>("OrganizationDataOrganizationId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<string>("LanguageCode")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LocaleCode")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OrganizationName")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OrganizationDataOrganizationId", "Id");

                                    b2.ToTable("Organization");

                                    b2.WithOwner()
                                        .HasForeignKey("OrganizationDataOrganizationId");
                                });

                            b1.Navigation("Contacts");

                            b1.Navigation("Languages");
                        });

                    b.Navigation("Data");

                    b.Navigation("Locations");

                    b.Navigation("OrganizationTypes");

                    b.Navigation("ParentOrganizations");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Participant", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Organization", "Organizations")
                        .WithMany("Participants")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefDisabilityType", "DisabilityTypes")
                        .WithMany("Participants")
                        .HasForeignKey("RefDisabilityTypeId");

                    b.HasOne("MEInsight.Entities.Reference.RefLocation", "Locations")
                        .WithMany("Participants")
                        .HasForeignKey("RefLocationId");

                    b.HasOne("MEInsight.Entities.Reference.RefParticipantCohort", "ParticipantCohorts")
                        .WithMany("Participants")
                        .HasForeignKey("RefParticipantCohortId");

                    b.HasOne("MEInsight.Entities.Reference.RefParticipantType", "ParticipantTypes")
                        .WithMany("Participants")
                        .HasForeignKey("RefParticipantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefSex", "Sex")
                        .WithMany("Participants")
                        .HasForeignKey("RefSexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DisabilityTypes");

                    b.Navigation("Locations");

                    b.Navigation("Organizations");

                    b.Navigation("ParticipantCohorts");

                    b.Navigation("ParticipantTypes");

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Group", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Organization", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Programs.Program", "Programs")
                        .WithMany("Groups")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Reference.RefGradeLevel", null)
                        .WithMany("Groups")
                        .HasForeignKey("RefGradeLevelId");

                    b.Navigation("Organizations");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.GroupEnrollment", b =>
                {
                    b.HasOne("MEInsight.Entities.Programs.Group", "Groups")
                        .WithMany("GroupEnrollments")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Core.Participant", "Participants")
                        .WithMany("GroupEnrollments")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groups");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.GroupEvaluation", b =>
                {
                    b.HasOne("MEInsight.Entities.Programs.GroupEnrollment", "GroupEnrollments")
                        .WithMany("GroupEvaluations")
                        .HasForeignKey("GroupEnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Programs.ProgramAssessment", "ProgramAssessments")
                        .WithMany("GroupEvaluations")
                        .HasForeignKey("ProgramAssessmentId");

                    b.Navigation("GroupEnrollments");

                    b.Navigation("ProgramAssessments");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Program", b =>
                {
                    b.HasOne("MEInsight.Entities.Reference.RefOrganizationType", "OrganizationTypes")
                        .WithMany("Programs")
                        .HasForeignKey("RefOrganizationTypeId");

                    b.HasOne("MEInsight.Entities.Reference.RefProgramType", null)
                        .WithMany("Programs")
                        .HasForeignKey("RefProgramTypeId");

                    b.Navigation("OrganizationTypes");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.ProgramAssessment", b =>
                {
                    b.HasOne("MEInsight.Entities.Programs.Program", "Programs")
                        .WithMany("ProgramAssessments")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefDisabilityType", b =>
                {
                    b.OwnsOne("MEInsight.Entities.Reference.RefDisabilityType+DisabilityData", "Data", b1 =>
                        {
                            b1.Property<int>("RefDisabilityTypeId")
                                .HasColumnType("int");

                            b1.HasKey("RefDisabilityTypeId");

                            b1.ToTable("RefDisabilityType");

                            b1.ToJson("Data");

                            b1.WithOwner()
                                .HasForeignKey("RefDisabilityTypeId");

                            b1.OwnsMany("MEInsight.Entities.Core.Language", "DisabilityLanguages", b2 =>
                                {
                                    b2.Property<int>("DisabilityDataRefDisabilityTypeId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<string>("LanguageCode")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LocaleCode")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OrganizationName")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("DisabilityDataRefDisabilityTypeId", "Id");

                                    b2.ToTable("RefDisabilityType");

                                    b2.WithOwner()
                                        .HasForeignKey("DisabilityDataRefDisabilityTypeId");
                                });

                            b1.Navigation("DisabilityLanguages");
                        });

                    b.Navigation("Data");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationCenterCluster", b =>
                {
                    b.HasOne("MEInsight.Entities.Reference.RefLocation", "Locations")
                        .WithMany("SchoolClusters")
                        .HasForeignKey("RefLocationId");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefLocation", b =>
                {
                    b.HasOne("MEInsight.Entities.Reference.RefLocation", "ParentLocations")
                        .WithMany("Locations")
                        .HasForeignKey("ParentLocationId");

                    b.HasOne("MEInsight.Entities.Reference.RefLocationType", "LocationTypes")
                        .WithMany("Locations")
                        .HasForeignKey("RefLocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MEInsight.Entities.Reference.RefLocation+LocationData", "Data", b1 =>
                        {
                            b1.Property<string>("RefLocationId")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("RefLocationId");

                            b1.ToTable("RefLocation");

                            b1.ToJson("Data");

                            b1.WithOwner()
                                .HasForeignKey("RefLocationId");

                            b1.OwnsMany("MEInsight.Entities.Core.Language", "LocationLanguages", b2 =>
                                {
                                    b2.Property<string>("LocationDataRefLocationId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<string>("LanguageCode")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LocaleCode")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OrganizationName")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("LocationDataRefLocationId", "Id");

                                    b2.ToTable("RefLocation");

                                    b2.WithOwner()
                                        .HasForeignKey("LocationDataRefLocationId");
                                });

                            b1.Navigation("LocationLanguages");
                        });

                    b.Navigation("Data");

                    b.Navigation("LocationTypes");

                    b.Navigation("ParentLocations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MEInsight.Entities.Core.EducationCenter", b =>
                {
                    b.Navigation("EducationCenterClassrooms");

                    b.Navigation("EducationCenterEnrollments");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.EducationCenterPeriod", b =>
                {
                    b.Navigation("EducationCenterClassrooms");

                    b.Navigation("EducationCenterEnrollments");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Organization", b =>
                {
                    b.Navigation("Organizations");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Participant", b =>
                {
                    b.Navigation("GroupEnrollments");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Group", b =>
                {
                    b.Navigation("GroupEnrollments");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.GroupEnrollment", b =>
                {
                    b.Navigation("GroupEvaluations");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Program", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("ProgramAssessments");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.ProgramAssessment", b =>
                {
                    b.Navigation("GroupEvaluations");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefDisabilityType", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationCenterAdministrationType", b =>
                {
                    b.Navigation("EducationCenters");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationCenterCluster", b =>
                {
                    b.Navigation("EducationCenters");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationCenterLanguage", b =>
                {
                    b.Navigation("EducationCenters");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationCenterLocation", b =>
                {
                    b.Navigation("EducationCenters");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationCenterStatus", b =>
                {
                    b.Navigation("EducationCenters");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefEducationCenterType", b =>
                {
                    b.Navigation("EducationCenters");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefGradeLevel", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("SchoolClassrooms");

                    b.Navigation("SchoolEnrollments");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefLocation", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Organizations");

                    b.Navigation("Participants");

                    b.Navigation("SchoolClusters");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefLocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefOrganizationType", b =>
                {
                    b.Navigation("Organizations");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefParticipantCohort", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefParticipantType", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("SchoolEnrollments");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefProgramType", b =>
                {
                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefSex", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
