// <auto-generated />
using System;
using MEInsight.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MEInsight.Migrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240605214420_DBUpdate06")]
    partial class DBUpdate06
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MEInsight.Entities.Core.Organization", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrganizationUnit")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentOrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RefOrganizationTypeId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.HasKey("OrganizationId");

                    b.HasIndex("ParentOrganizationId");

                    b.HasIndex("RefLocationId");

                    b.HasIndex("RefOrganizationTypeId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Participant", b =>
                {
                    b.Property<Guid>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("Disability")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstantMessenger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParticipantCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RefDisabilityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RefLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RefParticipantTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RefSexId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date");

                    b.HasKey("ParticipantId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RefLocationId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<bool?>("Closed")
                        .HasColumnType("bit")
                        .HasColumnOrder(10);

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(11);

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(12);

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(9);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnOrder(6);

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(14);

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("ParticipantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7);

                    b.Property<int?>("ProgramId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int?>("RefGradeLevelId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(13);

                    b.HasKey("GroupId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProgramId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.GroupEnrollment", b =>
                {
                    b.Property<Guid>("GroupEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<int?>("Attendance")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5);

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefEnrollmentStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(8);

                    b.HasKey("GroupEnrollmentId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("GroupEnrollment");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.GroupEvaluation", b =>
                {
                    b.Property<Guid>("GroupEvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("EvaluationDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<Guid>("GroupEnrollmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ProgramAssessmentId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefEvaluationStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int?>("Score")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(5);

                    b.HasKey("GroupEvaluationId");

                    b.HasIndex("GroupEnrollmentId");

                    b.HasIndex("ProgramAssessmentId");

                    b.ToTable("GroupEvaluation");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Program", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4);

                    b.Property<bool>("DisplayMarks")
                        .HasColumnType("bit")
                        .HasColumnOrder(9);

                    b.Property<bool>("HasAssessment")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Max")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int?>("Min")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(1);

                    b.Property<int?>("RefAttendanceUnitId")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("RefOrganizationTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<int?>("RefProgramDeliveryTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefProgramTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("ProgramId");

                    b.HasIndex("RefOrganizationTypeId");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.ProgramAssessment", b =>
                {
                    b.Property<int>("ProgramAssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramAssessmentId"));

                    b.Property<string>("AssessmentName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<int?>("CompletionScore")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Max")
                        .HasColumnType("int")
                        .HasColumnOrder(6);

                    b.Property<int?>("MaximumScore")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<int?>("Min")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<int?>("MinimumScore")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int?>("RefAssessmentTypeId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int?>("RefAttendanceUnitId")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.Property<int?>("RefEvaluationStatusId")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<bool>("TrackAttendance")
                        .HasColumnType("bit")
                        .HasColumnOrder(5);

                    b.HasKey("ProgramAssessmentId");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramAssessment");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefLocation", b =>
                {
                    b.Property<string>("RefLocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefLocationTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefLocationId");

                    b.ToTable("RefLocation");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefOrganizationType", b =>
                {
                    b.Property<int>("RefOrganizationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefOrganizationTypeId"));

                    b.Property<string>("OrganizationTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefOrganizationTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefOrganizationTypeId");

                    b.ToTable("OrganizationTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Organization", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Organization", "ParentOrganizations")
                        .WithMany("Organizations")
                        .HasForeignKey("ParentOrganizationId");

                    b.HasOne("MEInsight.Entities.Reference.RefLocation", "Locations")
                        .WithMany()
                        .HasForeignKey("RefLocationId");

                    b.HasOne("MEInsight.Entities.Reference.RefOrganizationType", "OrganizationTypes")
                        .WithMany("Organizations")
                        .HasForeignKey("RefOrganizationTypeId");

                    b.OwnsOne("MEInsight.Entities.Core.Organization+OrganizationData", "Data", b1 =>
                        {
                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Organization");

                            b1.ToJson("Data");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");

                            b1.OwnsMany("MEInsight.Entities.Core.Organization+OrganizationData+Language", "Languages", b2 =>
                                {
                                    b2.Property<Guid>("OrganizationDataOrganizationId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<string>("LanguageCode")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LocaleCode")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("OrganizationName")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OrganizationDataOrganizationId", "Id");

                                    b2.ToTable("Organization");

                                    b2.WithOwner()
                                        .HasForeignKey("OrganizationDataOrganizationId");
                                });

                            b1.OwnsOne("MEInsight.Entities.Core.Organization+OrganizationData+OrganizationContact", "Contacts", b2 =>
                                {
                                    b2.Property<Guid>("OrganizationDataOrganizationId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Contact")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Phone")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OrganizationDataOrganizationId");

                                    b2.ToTable("Organization");

                                    b2.WithOwner()
                                        .HasForeignKey("OrganizationDataOrganizationId");
                                });

                            b1.Navigation("Contacts");

                            b1.Navigation("Languages");
                        });

                    b.Navigation("Data");

                    b.Navigation("Locations");

                    b.Navigation("OrganizationTypes");

                    b.Navigation("ParentOrganizations");
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Participant", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Organization", "Organizations")
                        .WithMany("Participants")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("MEInsight.Entities.Reference.RefLocation", "Locations")
                        .WithMany()
                        .HasForeignKey("RefLocationId");

                    b.Navigation("Locations");

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Group", b =>
                {
                    b.HasOne("MEInsight.Entities.Core.Organization", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Programs.Program", "Programs")
                        .WithMany("Groups")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizations");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.GroupEnrollment", b =>
                {
                    b.HasOne("MEInsight.Entities.Programs.Group", "Groups")
                        .WithMany("GroupEnrollments")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Core.Participant", "Participants")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groups");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.GroupEvaluation", b =>
                {
                    b.HasOne("MEInsight.Entities.Programs.GroupEnrollment", "GroupEnrollments")
                        .WithMany("GroupEvaluations")
                        .HasForeignKey("GroupEnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MEInsight.Entities.Programs.ProgramAssessment", "ProgramAssessments")
                        .WithMany("GroupEvaluations")
                        .HasForeignKey("ProgramAssessmentId");

                    b.Navigation("GroupEnrollments");

                    b.Navigation("ProgramAssessments");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Program", b =>
                {
                    b.HasOne("MEInsight.Entities.Reference.RefOrganizationType", "OrganizationTypes")
                        .WithMany("Programs")
                        .HasForeignKey("RefOrganizationTypeId");

                    b.Navigation("OrganizationTypes");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.ProgramAssessment", b =>
                {
                    b.HasOne("MEInsight.Entities.Programs.Program", "Programs")
                        .WithMany("ProgramAssessments")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MEInsight.Entities.Core.Organization", b =>
                {
                    b.Navigation("Organizations");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Group", b =>
                {
                    b.Navigation("GroupEnrollments");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.GroupEnrollment", b =>
                {
                    b.Navigation("GroupEvaluations");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.Program", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("ProgramAssessments");
                });

            modelBuilder.Entity("MEInsight.Entities.Programs.ProgramAssessment", b =>
                {
                    b.Navigation("GroupEvaluations");
                });

            modelBuilder.Entity("MEInsight.Entities.Reference.RefOrganizationType", b =>
                {
                    b.Navigation("Organizations");

                    b.Navigation("Programs");
                });
#pragma warning restore 612, 618
        }
    }
}
